using System.Linq;
using System.Text;
using Devantler.DataMesh.DataProduct.Configuration;
using Devantler.DataMesh.DataProduct.SourceGenerator.Base;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.Extensions.Configuration;

namespace Devantler.DataMesh.DataProduct.SourceGenerator;

[Generator]
public class RESTControllerGenerator : GeneratorBase
{
    public override void Generate(SourceProductionContext context, Compilation compilation, IConfiguration configuration)
    {
        var apis = configuration.GetSection("Features").Get<Features>().Apis;
        if (!apis.Contains("rest"))
            return;

        var schemas = configuration.GetSection("Schemas").Get<Schema[]>();
        var rootNamespace = compilation.AssemblyName;

        var localNamespace = $"{rootNamespace}.Features.Apis.REST";

        foreach (var schema in schemas)
        {
            var className = $"{schema.Name}Controller";

            var source =
            $$"""
            // <auto-generated />
            using {{rootNamespace}}.Models;
            using {{rootNamespace}}.Features.DataStores.Base;
            using {{rootNamespace}}.Features.DataStores.Entities;
            using AutoMapper;
            using Microsoft.AspNetCore.Mvc;
            
            namespace {{localNamespace}};
            
            public class {{className}} : ControllerBase<Models.{{schema.Name}}, DataStores.Entities.{{schema.Name}}>
            {
                public {{className}}(IRepository<DataStores.Entities.{{schema.Name}}> repository, IMapper mapper) : base(repository, mapper)
                {
                }
            }
            
            """;

            context.AddSource($"{className}.cs", SourceText.From(source, Encoding.UTF8));
        }
    }
}
