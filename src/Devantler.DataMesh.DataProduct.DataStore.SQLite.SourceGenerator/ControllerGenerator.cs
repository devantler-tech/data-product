using System;
using System.Linq;
using System.Text;
using Devantler.DataMesh.DataProduct.Configuration;
using Devantler.SourceGenerator.Core;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.Extensions.Configuration;

namespace Devantler.DataMesh.DataProduct.DataStore.SQLite.SourceGenerator;

[Generator]
public class ControllerGenerator : GeneratorBase
{
    public override void Generate(SourceProductionContext context, Compilation compilation, IConfiguration configuration)
    {
        var schema = configuration.GetSection("Schemas").Get<Schema[]>().First();
        var assembly = compilation.AssemblyName;
        var coreAssembly = compilation.ReferencedAssemblyNames.First(x => x.Name.EndsWith("DataProduct.Core")).Name;
        var @namespace = assembly + ".Controllers";
        var @class = schema.Name + "Controller";
        var source = string.Join(Environment.NewLine,
            "// <auto-generated />",
            "using Microsoft.AspNetCore.Mvc;",
            $"using {coreAssembly}.Base.Controllers;",
            $"using {coreAssembly}.DTOs;",
            $"namespace {@namespace};",
            $"public class {@class} : ISQLiteController<{schema.Name}>",
            "{",
            "    public HttpClient HttpClient { get; }",
            $"    public {@class}(HttpClient httpClient){{",
            "        HttpClient = httpClient;",
            "    }",
            "}"
        );

        //context.AddSource($"{@class}.cs", SourceText.From(source, Encoding.UTF8));
    }
}
