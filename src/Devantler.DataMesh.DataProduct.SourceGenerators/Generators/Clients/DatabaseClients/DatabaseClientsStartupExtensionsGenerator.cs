using System;
using System.Linq;
using System.Text;
using Devantler.DataMesh.DataProduct.SourceGenerators.Base;
using Devantler.DataMesh.DataProduct.SourceGenerators.Extensions;
using Devantler.DataMesh.DataProduct.SourceGenerators.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Devantler.DataMesh.DataProduct.SourceGenerators.Generators.Clients;

[Generator]
public class DatabaseClientsStartupExtensionsGenerator : GeneratorBase, IIncrementalGenerator
{
    public override void Generate(SourceProductionContext context, Compilation compilation, Configuration configuration)
    {
        var @namespace = compilation.AssemblyName + ".Clients.DatabaseClients";
        var @class = GetType().Name[..^"Generator".Length];
        var source = string.Join(Environment.NewLine,
            "// <auto-generated />",
            $"namespace {@namespace};",
            "public static partial class DatabaseClientsStartupExtensions",
            "{",
            GenerateAddDatabaseClientFromSourceOutputMethod(configuration.Features.Database, configuration.Schemas.First().Name).IndentBy(4),
            "}"
        );

        context.AddSource($"{@class}.cs", SourceText.From(source, Encoding.UTF8));

        static string GenerateAddDatabaseClientFromSourceOutputMethod(Database database, string schemaName)
        {
            return database switch
            {
                Database.Auto => throw new NotImplementedException(),
                Database.Document => throw new NotImplementedException(),
                Database.Document_MongoDB => throw new NotImplementedException(),
                Database.Graph => throw new NotImplementedException(),
                Database.Graph_Neo4j => throw new NotImplementedException(),
                Database.Relational => throw new NotImplementedException(),
                Database.Relational_PostgreSQL => throw new NotImplementedException(),
                Database.Relational_SQLite => GenerateAddSqliteClient(schemaName),
                _ => throw new ArgumentOutOfRangeException(nameof(database), database, "Unknown database type"),
            };

            static string GenerateAddSqliteClient(string schemaName)
            {
                return string.Join(Environment.NewLine,
                "static partial void AddDatabaseClientFromSourceOutput(IServiceCollection services, IConfiguration configuration){{",
                $"    services.AddSingleton<ISQLiteServiceClient<{schemaName}>, SQLiteServiceClient<{schemaName}>>(",
                "        _ => new SQLiteServiceClient(DaprClient.CreateInvokeHttpClient('sqlite')));",
                "    return services;",
                "}"
                );
            }
        }
    }



}
