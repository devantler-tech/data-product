@using Microsoft.Extensions.Options;
@using Devantler.DataProduct.Configuration.Options;
@using Devantler.DataProduct.Configuration.Options.DataStore;
@using Devantler.DataProduct.Configuration.Options.Inputs;
@using Devantler.DataProduct.Configuration.Options.Outputs;
@using  Devantler.DataProduct.Configuration.Options.FeatureFlags;
@using System.Globalization;

@inject IOptions<DataProductOptions> Options

<Card Background="Background.Light" Margin="Margin.Is4.FromBottom">
    <CardBody>
        <CardTitle Size="3">Services</CardTitle>
        <CardText>
            <ListGroup Flush>
                <ListGroupItem>
                    <ServiceDetails Name="@Options.Value.DataStore.Provider"
                        Type=@($"Data Store - {Options.Value.DataStore.Type.ToString()}")
                        Description="The Data Store in use by the data product." />
                </ListGroupItem>

                <ListGroupItem>
                    <ServiceDetails Name="@Options.Value.SchemaRegistry.Type.ToString()" Type="Schema Registry"
                        Description="The Schema Registry in use by the data product." 
                        SubDescriptions=@(new List<string>() { $"Url: {Options.Value.SchemaRegistry.Url}", $"Schema: {Options.Value.SchemaRegistry.Schema.Subject} v{Options.Value.SchemaRegistry.Schema.Version}" })/>
                </ListGroupItem>

                @if (Options.Value.FeatureFlags.EnableCaching)
                {
                    <ListGroupItem>
                        <ServiceDetails Name="@Options.Value.CacheStore.Type.ToString()" Type="Cache Store"
                        Description="The Cache Store in use by the data product." />
                    </ListGroupItem>
                }

                @if(Options.Value.FeatureFlags.EnableDataCatalog)
                {
                    <ListGroupItem>
                        <ServiceDetails Name="@Options.Value.DataCatalog.Type.ToString()" Type="Data Catalog"
                        Description="The Data Catalog in use by the data product." 
                        SubDescriptions=@(new List<string>() { $"Url: {Options.Value.DataCatalog.Url}" })/>
                    </ListGroupItem>
                }

                @if (Options.Value.FeatureFlags.EnableInputs)
                {
                    @foreach (var input in Options.Value.Inputs)
                    {
                        switch (input.Type)
                        {
                            case InputType.Kafka:
                                var kafkaInput = (KafkaInputOptions)input;
                                var kafkaInputSubDescriptions = new List<string>() {
                                    $"Bootstrap Servers: {kafkaInput.Servers}",
                                    $"Consumer Group: {kafkaInput.GroupId}",
                                    $"Topic: {kafkaInput.Topic}"
                                };
                                <ListGroupItem>
                                    <ServiceDetails Name="@input.Type.ToString()" Type="Input"
                        Description="A Kafka input in use by the data product." 
                        SubDescriptions=@kafkaInputSubDescriptions/>
                                </ListGroupItem>
                                break;
                            case InputType.File:
                                var fileInput = (FileInputOptions)input;
                                var fileInputSubDescriptions = new List<string>() {
                                    $"File: {fileInput.FilePath}"
                                };
                                <ListGroupItem>
                                    <ServiceDetails Name="@input.Type.ToString()" Type="Input"
                        Description="A local input in use by the data product." 
                        SubDescriptions=@fileInputSubDescriptions/>
                                </ListGroupItem>
                                break;

                        }

                    }
                }
                @if (Options.Value.FeatureFlags.EnableOutputs)
                {
                    @foreach (var output in Options.Value.Outputs)
                    {
                        switch (output.Type)
                        {
                            case OutputType.Kafka:
                                var kafkaOutput = (KafkaOutputOptions)output;
                                var kafkaOutputSubDescriptions = new List<string>() {
                                    $"Bootstrap Servers: {kafkaOutput.Servers}",
                                    $"Producer Group: {kafkaOutput.GroupId}",
                                    $"Topic: {kafkaOutput.Topic}"
                                };
                                <ListGroupItem>
                                    <ServiceDetails Name="@output.Type.ToString()" Type="Output"
                        Description="A Kafka output in use by the data product." 
                        SubDescriptions=@kafkaOutputSubDescriptions/>
                                </ListGroupItem>
                                break;
                            case OutputType.File:
                                var fileOutput = (FileOutputOptions)output;
                                var fileOutputSubDescriptions = new List<string>() {
                                    $"File: {fileOutput.FilePath}"
                                };
                                <ListGroupItem>
                                    <ServiceDetails Name="@output.Type.ToString()" Type="Output"
                        Description="A file output in use by the data product." 
                        SubDescriptions=@fileOutputSubDescriptions/>
                                </ListGroupItem>
                                break;

                        }

                    }
                }
                @if(Options.Value.FeatureFlags.EnableTelemetry){
                    var telemetrySubDescriptions = new List<string>() {
                        Options.Value.Telemetry.EnableLogging ? "Logging Enabled" : "Logging Disabled",
                        Options.Value.Telemetry.EnableMetrics ? "Metrics Enabled" : "Metrics Disabled",
                        Options.Value.Telemetry.EnableTracing ? "Tracing Enabled" : "Tracing Disabled"
                    };
                    <ListGroupItem>
                        <ServiceDetails Name="@Options.Value.Telemetry.ExporterType.ToString()" Type="Telemetry Exporter"
                            Description="The telemetry exporter in use by the data product." SubDescriptions=@telemetrySubDescriptions />
                    </ListGroupItem>
                }
            </ListGroup>
        </CardText>
    </CardBody>
</Card>