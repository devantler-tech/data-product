using System;
using System.Linq;
using System.Text;
using Devantler.DataMesh.Core.Configuration;
using Devantler.DataMesh.Core.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Devantler.DataMesh.DataProduct.SourceGenerator.Models;

[Generator]
public class ModelsGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        var config = ConfigurationDeserializer.Deserialize(context.AdditionalFiles.First().GetText()?.ToString());

        var @namespace = context.Compilation.AssemblyName;

        foreach (var model in config.Models)
        {
            string modelSource = GenerateModel(@namespace, model);
            context.AddSource($"{model.Name}.cs", SourceText.From(modelSource, Encoding.UTF8));
        }

        static string GenerateModel(string? @namespace, Model model)
        {
            return string.Join(Environment.NewLine,
                "// <auto-generated />",
                $"namespace {@namespace}.Models;",
                $"public class {model.Name}",
                "{",
                $"{GenerateProperties(model)}",
                "}"
            );
            static string GenerateProperties(Model model)
            {
                return string.Join(
                    Environment.NewLine,
                    model.Properties.Select(
                        property => $"{IndentBy(4) + GenerateProperty(property)}"
                    )
                );

                static string IndentBy(int spaces) => new(' ', spaces);

                static string GenerateProperty(Property x)
                {
                    return $"public {ParseType(x.Type)} {x.Name} {{ get; set; }}";

                    static string ParseType(string type)
                    {
                        if (type.EndsWith("[]"))
                        {
                            return $"IEnumerable<{type[..^2]}>";
                        }
                        return type;
                    }
                }
            }
        }
    }

}
