{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/devantler/data-mesh/data-sources/src/Devantler.DataMesh.DataProduct/config.schema.json",
    "title": "Data Product Config",
    "description": "Specification for a data product config",
    "type": "object",
    "properties": {
        "Name": {
            "description": "The name of the data product",
            "type": "string"
        },
        "Description": {
            "description": "A description of the data product.",
            "type": "string"
        },
        "Version": {
            "description": "The version of the data product. Uses semantic versioning (vX.Y.Z).",
            "type": "string",
            "pattern": "^v[0-9]+\\.[0-9]+(\\.[0-9]+)?$"
        },
        "License": {
            "description": "The license of the data product.",
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "The name of the license."
                },
                "Url": {
                    "type": "string",
                    "description": "A URL that points to the license."
                }
            },
            "required": [
                "Name",
                "Url"
            ]
        },
        "Owner": {
            "description": "The owner of the data product.",
            "type": "object",
            "properties": {
                "Name": {
                    "description": "The name of the owner.",
                    "type": "string"
                },
                "Email": {
                    "description": "The email of the owner.",
                    "type": "string",
                    "format": "email"
                },
                "Organisation": {
                    "description": "The organisation of the owner.",
                    "type": "string"
                },
                "Phone": {
                    "description": "The phone number of the owner.",
                    "type": "string",
                    "pattern": "^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$"
                },
                "Website": {
                    "description": "The website of the owner.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "Name"
            ]
        },
        "FeatureFlags": {
            "description": "The feature flags for the data product.",
            "type": "object",
            "properties": {
                "EnableApis": {
                    "description": "Whether to enable specific APIs for the data product.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Rest",
                            "GraphQL",
                            "gRPC"
                        ]
                    }
                },
                "EnableDataIngestion": {
                    "description": "Whether to enable data ingestion for the data product. Data Ingestion Source must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableDataEgestion": {
                    "description": "Whether to enable data publication for the data product. Data Publication Target must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableDataCatalog": {
                    "description": "Whether to enable a data catalog integration for the data product. A data catalog must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableTracing": {
                    "description": "Whether to enable tracing for the data product. A tracing provider must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableMetrics": {
                    "description": "Whether to enable metrics for the data product. A metrics provider must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableCaching": {
                    "description": "Whether to enable caching for the data product. A cache store must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableAuthentication": {
                    "description": "Whether to enable authentication for the data product. An authentication provider must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableAuthorisation": {
                    "description": "Whether to enable authorisation for the data product. Policies must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableWebhooks": {
                    "description": "Whether to enable webhooks for the data product. Webhooks must be configured for this feature to take effect.",
                    "type": "boolean"
                },
                "EnableDashboard": {
                    "description": "Whether to enable the dashboard for the data product.",
                    "type": "boolean"
                }
            }
        },
        "DataStore": {
            "description": "The data store used by the data product.",
            "type": "object",
            "properties": {
                "Type": {
                    "type": "string",
                    "enum": [
                        "SQL"
                    ]
                },
                "Provider": {
                    "type": "string",
                    "enum": [
                        "Sqlite",
                        "PostgreSQL"
                    ]
                },
                "ConnectionString": {
                    "type": "string"
                }
            },
            "required": [
                "Type",
                "Provider",
                "ConnectionString"
            ]
        },
        "Dashboard": {
            "description": "The dashboard configuration for the data product.",
            "type": "object",
            "properties": {
                "CSPFrameAncestors": {
                    "type": "array",
                    "items": {
                        "description": "A CSP frame-ancestors directive. Must be a valid URL or a wildcard.",
                        "type": "string",
                        "pattern": "^(http|https):[a-zA-Z0-9-.*]+(\\.[a-zA-Z0-9-]+)$"
                    }
                },
                "EmbeddedServices": {
                    "description": "The embedded services for the dashboard.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "Name": {
                                "description": "The name of the embedded service.",
                                "type": "string"
                            },
                            "Url": {
                                "description": "The URL of the embedded service.",
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": [
                            "Name",
                            "Url"
                        ]
                    }
                },
                "Links": {
                    "description": "The links for the dashboard.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "Name": {
                                "description": "The name of the link.",
                                "type": "string"
                            },
                            "Url": {
                                "description": "The URL of the link.",
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": [
                            "Name",
                            "Url"
                        ]
                    }
                }
            }
        },
        "CacheStore": {
            "description": "The cache store used by the data product.",
            "type": "object",
            "oneOf": [
                {
                    "$ref": "#/definitions/InMemoryCacheStore"
                },
                {
                    "$ref": "#/definitions/RedisCacheStore"
                }
            ]
        },
        "Apis": {
            "description": "The APIs used by the data product.",
            "type": "object",
            "properties": {
                "GraphQL": {
                    "description": "The GraphQL API used by the data product.",
                    "type": "object",
                    "properties": {}
                },
                "Rest": {
                    "description": "The Rest API used by the data product.",
                    "type": "object",
                    "properties": {}
                }
            }
        },
        "SchemaRegistry": {
            "description": "The schema registry used by the data product.",
            "type": "object",
            "properties": {
                "Type": {
                    "description": "The type of schema registry.",
                    "type": "string",
                    "enum": [
                        "Local",
                        "Kafka"
                    ]
                },
                "Url": {
                    "description": "The URL of the schema registry. If the schema registry is local, this value is the path to where you store your schemas.",
                    "type": "string",
                    "format": "uri"
                },
                "Schema": {
                    "description": "The schema to use from the schema registry.",
                    "type": "object",
                    "properties": {
                        "Subject": {
                            "description": "The subject of the schema.",
                            "type": "string"
                        },
                        "Version": {
                            "description": "The version of the schema.",
                            "type": "number",
                            "minimum": 1
                        }
                    },
                    "required": [
                        "Subject",
                        "Version"
                    ]
                }
            },
            "required": [
                "Type"
            ],
            "if": {
                "properties": {
                    "Type": {
                        "const": "Kafka"
                    }
                }
            },
            "then": {
                "required": [
                    "Url"
                ]
            }
        },
        "DataIngestors": {
            "type": "array",
            "description": "The data ingestors used by the data product.",
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/LocalDataIngestor"
                    },
                    {
                        "$ref": "#/definitions/KafkaDataIngestor"
                    }
                ]
            }
        },
        "DataCatalog": {
            "type": "object",
            "description": "The data catalog used by the data product.",
            "oneOf": [
                {
                    "$ref": "#/definitions/DataHubDataCatalog"
                }
            ]
        }
    },
    "required": [
        "Name",
        "Version",
        "DataStore",
        "SchemaRegistry"
    ],
    "definitions": {
        "InMemoryCacheStore": {
            "type": "object",
            "properties": {
                "Type": {
                    "description": "The type of cache store.",
                    "type": "string",
                    "const": "InMemory"
                },
                "ExpirationTime": {
                    "description": "The expiration time for cache entries in the cache store. Example values: 3d (3 days), 2h (2 hours), 30m (30 minutes), 10s (10 seconds). The default value is 5 minutes.",
                    "type": "string",
                    "pattern": "^([0-9]+)([smhd])?$"
                }
            },
            "required": [
                "Type"
            ]
        },
        "RedisCacheStore": {
            "type": "object",
            "properties": {
                "Type": {
                    "description": "The type of cache store.",
                    "type": "string",
                    "const": "Redis"
                },
                "Server": {
                    "description": "The server used by the cache store.",
                    "type": "string"
                },
                "ExpirationTime": {
                    "description": "The expiration time for cache entries in the cache store. Example values: 3d (3 days), 2h (2 hours), 30m (30 minutes), 10s (10 seconds). The default value is 5 minutes.",
                    "type": "string",
                    "pattern": "^([0-9]+)([smhd])?$"
                }
            },
            "required": [
                "Type",
                "Server"
            ]
        },
        "LocalDataIngestor": {
            "type": "object",
            "properties": {
                "Type": {
                    "description": "The type of data ingestor.",
                    "type": "string",
                    "const": "Local"
                },
                "FilePath": {
                    "description": "The path to the file to ingest.",
                    "type": "string"
                }
            },
            "required": [
                "Type",
                "FilePath"
            ]
        },
        "KafkaDataIngestor": {
            "type": "object",
            "properties": {
                "Type": {
                    "description": "The type of data ingestor.",
                    "type": "string",
                    "const": "Kafka"
                },
                "Servers": {
                    "description": "The servers used by the data ingestor.",
                    "type": "string",
                    "format": "uri-reference"
                },
                "GroupId": {
                    "description": "The group ID used by the data ingestor.",
                    "type": "string"
                },
                "Topic": {
                    "description": "The topic used by the data ingestor.",
                    "type": "string"
                }
            },
            "required": [
                "Type",
                "Servers",
                "GroupId",
                "Topic"
            ]
        },
        "DataHubDataCatalog": {
            "type": "object",
            "properties": {
                "Type": {
                    "description": "The type of data catalog.",
                    "type": "string",
                    "const": "DataHub"
                },
                "Url": {
                    "description": "The URL of the data catalog.",
                    "type": "string",
                    "format": "uri"
                },
                "AccessToken": {
                    "description": "The access token used to authenticate with the data catalog.",
                    "type": "string"
                }
            },
            "required": [
                "Type",
                "Url",
                "AccessToken"
            ]
        }
    }
}