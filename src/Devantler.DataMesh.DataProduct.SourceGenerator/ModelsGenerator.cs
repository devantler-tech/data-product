using System.Text;
using Devantler.DataMesh.DataProduct.Configuration;
using Devantler.DataMesh.DataProduct.SourceGenerator.Base;
using Devantler.DataMesh.DataProduct.SourceGenerator.Extensions;
using Devantler.DataMesh.DataProduct.SourceGenerator.Parsers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.Extensions.Configuration;

namespace Devantler.DataMesh.DataProduct.SourceGenerator;

[Generator]
public class ModelsGenerator : GeneratorBase
{
    public override void Generate(SourceProductionContext context, Compilation compilation, IConfiguration configuration)
    {
        var schemas = configuration.GetSection("Schemas").Get<Schema[]>();
        var rootNamespace = compilation.AssemblyName;
        var localNamespace = $"{rootNamespace}.Models";

        foreach (var schema in schemas)
        {
            var className = schema.Name;
            var source =
            $$"""
            // <auto-generated />
            namespace {{localNamespace}};

            public class {{className}} : IModel
            {
                public Guid Id { get; set; }
                {{PropertyParser.Parse(schema.Properties).IndentBy(4)}}    
            }

            """;

            context.AddSource($"{schema.Name}.cs", SourceText.From(source, Encoding.UTF8));
        }
    }
}
