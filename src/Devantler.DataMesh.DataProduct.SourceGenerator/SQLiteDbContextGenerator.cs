using System.Linq;
using System.Text;
using Devantler.DataMesh.DataProduct.Configuration;
using Devantler.DataMesh.DataProduct.SourceGenerator.Base;
using Devantler.DataMesh.DataProduct.SourceGenerator.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.Extensions.Configuration;

namespace Devantler.DataMesh.DataProduct.SourceGenerator;

[Generator]
public class SQLiteDbContextGenerator : GeneratorBase
{
    public override void Generate(SourceProductionContext context, Compilation compilation, IConfiguration configuration)
    {
        var dataStore = configuration.GetSection("Features").Get<Features>().DataStore;
        if(dataStore != DataStore.SQLite)
            return;
        var schema = configuration.GetSection("Schemas").Get<Schema[]>().First();
        var rootNamespace = compilation.AssemblyName;
        var localNamespace = $"{rootNamespace}.Features.DataStores.{dataStore}.Contexts";
        var className = $"{schema.Name.ToPascalCase()}DbContext";
        var source =
        $$"""
        // <auto-generated />
        using Microsoft.EntityFrameworkCore;
        using {{rootNamespace}}.Features.DataStores.Entities;
        
        namespace {{localNamespace}};
        
        public class {{className}} : DbContext
        {
            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options.UseSqlite($"Data Source={{schema.Name}}{{dataStore}}.db");
        
            public DbSet<{{schema.Name}}> {{schema.Name.ToPlural()}} { get; set; } = null!;
        }
        
        """;

        context.AddSource($"{className}.cs", SourceText.From(source, Encoding.UTF8));
    }
}
